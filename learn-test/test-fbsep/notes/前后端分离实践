一、前后端分离究竟分离了什么？

1、交互方式的分离

后端按约定数据格式提供接口，前端发起HTTP请求获取数据

2、代码组织方式的分离

前端代码与后端代码在两个不同的工程目录或在两个不同的代码库中

半分离：前后共用代码库，但代码分属两个工程，前端不能独立进行开发与测试

全分离：前后代码库分离，前端代码中有可以进行Mock测试的伪后端，支持独立开发和测试

针对第2点更抽象一点的说法是架构分离

前端不需要依赖后端架构，后端也不需要知道前端使用什么架构

3、开发职责的分离

前后端的并行开发

4、应用部署分离

前后端分别部署在不同的服务器上


二、前后端分离的后端任务（参考链接：https://blog.csdn.net/xiaoxinshuaiga/article/details/79540386）

1、封装统一的返回数据格式

参考：ApiResponse.java和ApiController.java

2、使用AOP进行统一异常处理

参考：ExceptionAspect.java和ApiController.java

3、使用Swagger进行接口文档维护

参考：SwaggerConfig.java、ApiController.java、UserRequestDTO.java、ValidatorConfig.java

4、使用hibernate-validator进行参数验证

参考链接springboot进行参数验证
https://blog.csdn.net/xuhuanfeng232/article/details/83894822
https://www.cnblogs.com/mr-yang-localhost/p/7812038.html (详细使用)
https://blog.csdn.net/Anenan/article/details/84313934 (异常处理)
https:// https://blog.csdn.net/aiyaya_/article/details/78588200（验证枚举一）
https:// https://blog.csdn.net/aiyaya_/article/details/78588200（验证枚举二）
https://blog.csdn.net/liu19900205/article/details/81503511（验证日期时间）
参考：ValidatorConfig.java

注意：对于@PathVariable以及@RequestParam的入参是不生效的，可以直接在参数上使用验证注解，但是它抛出的是ConstraintViolationException
异常，需要在全局异常处理中添加新的异常处理。

5、使用CORS技术解决跨域问题

可以使用@CrossOrigin注解，可参考链接：http://www.cnblogs.com/mmzs/p/9167743.html

6、使用Token提供安全验证机制


三、前后端分离的前端任务



