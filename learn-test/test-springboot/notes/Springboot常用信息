SpringBoot1学习参考地址：https://www.cnblogs.com/ityouknow/p/5662753.html
SpringBoot2学习参考地址：https://blog.csdn.net/liubenlong007/article/details/85383482

一、注解使用

1、@RestController：使用此注解的类中的方法默认都是返回json格式数据，不需要再配置jackson

2、@Value：使用此注解注入配置文件配置项

    (1) 在application.properties中进行配置，示例如下：

    test.title=测试标题

    (2) 创建ApplicationPropertiesTest类，在类中使用@Value进行注入，示例如下：

    @Value("${test.title}")
    private String testTitle;
    //要添加getter和setter方法

    (3) 使用时在Controller注入配置类的Bean

    @Autowired
    ApplicationPropertiesTest propertiesTest;
    //ApplicationPropertiesTest类记得添加@Component注解

    (4) 注意：@Value注解的值只能在当前容器使用。由于子容器可以访问父容器，而父容器不可以访问子容器，如果父子容器

    都想使用@Value注解注入的值，则可以先把值注入到Service中，然后子容器再去Service中获取值

    (5) 更多详细内容可以参考：https://blog.csdn.net/hry2015/article/details/72353994

3、@Entity和@Table

    @Entity配合@Id来进行对象关系映射，它属于JPA规范

    更多详细内容参考：https://www.cnblogs.com/softidea/p/6216722.html

4、@JsonIgnoreProperties(value = { "hibernateLazyInitializer", "handler" })

    实体类上添加这个注解用于消除由于序列化空属性值时出现的异常


二、Spring Jpa Data（更多使用可参考：https://blog.csdn.net/mickjoust/article/details/80352795）

1、继承JpaRepository

    Spring Jpa Data默认生成了一些基本的CURD方法，可以到CrudRepository类中查看，使用时继承JpaRepository类即可

2、自定义查询

    (1) 自定义方法名自动生成SQL，主要语法是findXXBy,queryXXBy,countXXBy, getXXBy后面跟属性名，修改和删除也是类似语法

    (2) 自定义SQL查询或更新，查询时在方法名上加@Query注解，更新时加@Query注解和@Modifying注解

3、分页查询

    (1) 基于0的页面索引查询

        int size = 25;
        int page = 0; //基于零的页面索引。
        Pageable pageable = PageRequest.of(page,size);
        Page<Man> usersPage = manRepository.findAll(pageable);
        usersPage.getTotalElements(); - 返回元素的总数量。
        usersPage.getTotalPages(); - 返回总页数。
        usersPage.hasNext();
        usersPage.hasPrevious();
        List<Man> usersList = usersPage.getContent();

    (2) 排序查询方式

        Sort sort2 = new Sort(Sort.Direction.ASC,"name");
        Pageable pageable1 = PageRequest.of(page,size,sort2);
        Page<Man> usersPage1 = manRepository.findAll(pageable1);

4、自定义配置多个数据源（需要关闭自动配置和特定的配置组件，其实微服务规范并不建议配置多个数据源，微服务的理念是一个服务一个数据源）

    (1) 关闭自动配置

    @SpringBootApplication(exclude = {
            DataSourceAutoConfiguration.class,
            HibernateJpaAutoConfiguration.class,
            DataSourceTransactionManagerAutoConfiguration.class})
    @EnableTransactionManagement
    public class ManControllerExclude {

        public static void main(String[] args) {
            SpringApplication.run(ManControllerExclude.class,args);
        }
    }

    (2) 在配置文件中加入数据源的配置（具体配置请参考application.properties文件）

    (3) 添加DataSourceConfig数据源配置类和DemoConfig事务管理器配置类（具体配置查看类文件）

    (4) 问题：引入druid连接池引发的日志错误，需要添加log4j来解决，但这样的话项目中会有两个日志框架

        解决方法参考：https://blog.csdn.net/qq_35170213/article/details/85779498

    (5) 问题：多数据源事务回滚

        如果需要保证Mapper1和Mapper2两个任何一个插入失败两个都回滚，那么这是跨库事务，要用JTA事务。
        如果你本意只是Mapper1和Mapper2哪个插入失败，回滚失败的那个，只需要在service中分开两个方法调用Mapper1和Mapper2，
        并指定不同的事务管理器，然后在Controller中调用这两个services方法即可。

    (6) 问题：try{}catch(){}导致的事务不回滚问题

        在spring的文档中说道，spring声明式事务管理默认对非检查型异常和运行时异常进行事务回滚，而对检查型异常(try catch)则不进行回滚操作，
        故而如果异常被try{}catch{}了，事务就不回滚了，如果想让事务回滚必须再往外抛try{}catch{throw Exception}。

    (7) 问题：如何配置jta事务

    可参考一：https://blog.csdn.net/weixin_41685100/article/details/80046525
    可参考二：https://blog.csdn.net/sinat_36596988/article/details/82149241
    可参考三：https://www.cnblogs.com/tusheng/p/9077309.html


三、log配置

    log配置内容请查看application.properties文件


四、数据库操作

1、首先要添加mysql的依赖，如果需要用到jpa或spring jdbc需要另外添加依赖；

2、在配置文件中配置url、driver、username、pwd等信息，配置内容请查看application.properties文件


五、整合Thymeleaf模板（更多使用可参考：https://www.cnblogs.com/jin-zhe/p/8202885.html）

    1、添加依赖

    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>

    2、添加配置

    具体配置内容查看application.properties文件

    3、实现热部署方式一（还可以使用devtools或者ctrl+f9进行rebuild）

        (1) 设置idea --> File --> Settings --> 查找 build project automatically --> 选中

        (2) 设置idea --> File --> Settings --> 查找Registry --> 找到并勾选compiler.automake.allow.when.app.running

        (3) 配置设置spring.thymeleaf.cache=false

        (4) 热部署可参考：https://liuyanzhao.com/7105.html

        (5) 请注意显示页面的方法所在类不能有@RestController注解，否则将返回json字符串，而不是页面


六、整合redis

1、添加依赖

<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-pool2</artifactId>
</dependency>

2、添加缓存配置

    请查看类：RedisConfig配置类

3、获取和设置缓存

    在@RestController所在的类中要设置缓存的方法上添加@Cacheable(value = "user1") //注：user1是键

4、异常解决

    (1) 异常：com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.mengfei.learn.pojo.demo.UserBase$HibernateProxy$jTZvlLMQ["hibernateLazyInitializer"])

    (2) 出现异常的原因是：第一次获取缓存时会先查询redis，由于redis中没有缓存数据，实体类在序列化时就会出现这个异常

    (3) 解决方法：https://blog.csdn.net/J080624/article/details/82529082


七、Session共享（默认使用Redis）

1、添加的依赖

<dependency>
    <groupId>org.springframework.session</groupId>
    <artifactId>spring-session-data-redis</artifactId>
</dependency>

2、添加Session配置

    请参考：SessionConfig配置类

3、多个项目共享（该方案已经进行测试可行）

    只需要在其他项目再添加一次配置即可，启动时会自动进行Session共享。

    实现原理：使用时服务器将会生成一个Cookie名为SESSION的cookie来存储SessionId，当浏览器下次访问时将会把该SessionId发送到服务器以判断

是不是已经登录的用户，由于后台服务器可能会做负载均衡，所以使用Redis来做Session共享，默认有效时间为1800秒（30分钟）


